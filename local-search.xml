<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iOS Design Themes</title>
    <link href="/2021/02/24/ios-design/"/>
    <url>/2021/02/24/ios-design/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS设计主旨-amp-六大设计原则"><a href="#iOS设计主旨-amp-六大设计原则" class="headerlink" title="iOS设计主旨&amp;六大设计原则"></a>iOS设计主旨&amp;六大设计原则</h1><blockquote><p>As an app designer, you have the opportunity to deliver an extraordinary product that rises to the top of the App Store charts. To do so, you’ll need to meet high expectations for quality and functionality.</p></blockquote><p>本文译自Apple官方发布的人机交互指南 <a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/">Human Interface Guidelines（HIG）</a><br>官方文档翻译和理解起来稍微有些难度，一些专业名词术语不是很清晰。<br>需继续完善与学习。</p><p>以下仅代表个人翻译整理得到的理解与看法。</p><h2 id="iOS-Design-Themes-iOS设计主旨"><a href="#iOS-Design-Themes-iOS设计主旨" class="headerlink" title="iOS Design Themes (iOS设计主旨)"></a>iOS Design Themes (iOS设计主旨)</h2><ul><li><h3 id="Clarity-清晰"><a href="#Clarity-清晰" class="headerlink" title="Clarity (清晰)"></a>Clarity (清晰)</h3></li></ul><p>遍历整个系统，文字在各种尺寸上都<strong>清晰可辨</strong>；<br>图标精确而清晰，装饰巧妙且恰当，并且对<strong>功能</strong>的敏锐关注激发了设计；<br>负空间，颜色，字体，图形和界面元素巧妙地突出<strong>重要内容</strong>并传达<strong>交互性</strong>。</p><blockquote><p>原：Throughout the system, text is legible at every size, icons are precise and lucid, adornments are subtle and appropriate, and a sharpened focus on functionality motivates the design. Negative space, color, fonts, graphics, and interface elements subtly highlight important content and convey interactivity.</p></blockquote><ul><li><h3 id="Deference-遵从"><a href="#Deference-遵从" class="headerlink" title="Deference (遵从)"></a>Deference (遵从)</h3></li></ul><p><strong>流畅的动作</strong>和<strong>简洁优美的界面</strong>可以帮助人们理解和互动内容，而不会与之竞争(矛盾)；<br>内容通常填充整个屏幕，而半透明和模糊通常暗示更多；<br>对边框、渐变和阴影的最小使用使界面保持明亮和通透，同时<strong>确保内容</strong>是最重要的。</p><blockquote><p>原：Fluid motion and a crisp, beautiful interface help people understand and interact with content while never competing with it. Content typically fills the entire screen, while translucency and blurring often hint at more. Minimal use of bezels, gradients, and drop shadows keep the interface light and airy, while ensuring that content is paramount.</p></blockquote><ul><li><h3 id="Depth-深度-层次感"><a href="#Depth-深度-层次感" class="headerlink" title="Depth (深度/层次感)"></a>Depth (深度/层次感)</h3></li></ul><p>独特的<strong>视觉层次</strong>和现实的运动传达层次，赋予活力，促进理解;<br>触摸和可发现性增强了愉悦感，并且能够在不丢失上下文的情况下访问功能和附加内容;<br>在浏览内容时，<strong>过渡</strong>提供了一种深度感。<br><em>(稍微有点难以理解深度层次感)</em></p><blockquote><p>原：Distinct visual layers and realistic motion convey hierarchy, impart vitality, and facilitate understanding. Touch and discoverability heighten delight and enable access to functionality and additional content without losing context. Transitions provide a sense of depth as you navigate through content.</p></blockquote><h2 id="Design-Principles-设计原则"><a href="#Design-Principles-设计原则" class="headerlink" title="Design Principles (设计原则)"></a>Design Principles (设计原则)</h2><ul><li><h3 id="Aesthetic-Integrity-审美完整性"><a href="#Aesthetic-Integrity-审美完整性" class="headerlink" title="Aesthetic Integrity (审美完整性)"></a>Aesthetic Integrity (审美完整性)</h3></li></ul><p>审美完整性体现了app的外观和行为与其功能的整合程度;<br>例如，一个帮助用户执行严肃任务的app可以通过使用微妙、不显眼的图形、标准控件和可预测的行为来保持他们的专注;<br>另一方面，沉浸式app，如游戏，可以提供吸引人的外观，传递乐趣和刺激感，同时鼓励发现。</p><blockquote><p>原：Aesthetic integrity represents how well an app’s appearance and behavior integrate with its function. For example, an app that helps people perform a serious task can keep them focused by using subtle, unobtrusive graphics, standard controls, and predictable behaviors. On the other hand, an immersive app, such as a game, can deliver a captivating appearance that promises fun and excitement, while encouraging discovery.</p></blockquote><ul><li><h3 id="Consistency-一致性-统一性"><a href="#Consistency-一致性-统一性" class="headerlink" title="Consistency (一致性/统一性)"></a>Consistency (一致性/统一性)</h3></li></ul><p>一个具有一致性的app通过使用系统提供的界面元素、熟悉的图标、标准的文字样式、统一的术语执行为人熟知的标准和样式;<br>这种app符合用户期望的特征和行为。<br><em>(界面元素，图标，文字排版相互适应统一)</em></p><blockquote><p>原：A consistent app implements familiar standards and paradigms by using system-provided interface elements, well-known icons, standard text styles, and uniform terminology. The app incorporates features and behaviors in ways people expect.</p></blockquote><ul><li><h3 id="Direct-Manipulation-直接操作"><a href="#Direct-Manipulation-直接操作" class="headerlink" title="Direct Manipulation (直接操作)"></a>Direct Manipulation (直接操作)</h3></li></ul><p>直接操作屏幕内容可以让人们更容易理解。当用户旋转设备或使用手势来影响屏幕内容时，用户就会体验到直接操作;<br>通过直接操纵，他们可以看到他们行动的直接、可见的结果。</p><blockquote><p>原：The direct manipulation of onscreen content engages people and facilitates understanding. Users experience direct manipulation when they rotate the device or use gestures to affect onscreen content. Through direct manipulation, they can see the immediate, visible results of their actions.</p></blockquote><ul><li><h3 id="Feedback-反馈"><a href="#Feedback-反馈" class="headerlink" title="Feedback (反馈)"></a>Feedback (反馈)</h3></li></ul><p>反馈对用户的行动进行了确认，并显示行动结果以使用户了解情况;<br>内置的iOS app为用户的每一项操作提供可感知的反馈;<br>轻触时会突出显示交互元素；进度指示器会传达长时间运行的项目的状态；动画和音效有助于阐明操作的结果。<br><em>(触控感知反馈与用户进行交互，可让用户了解作出动作后的状态)</em></p><blockquote><p>原：Feedback acknowledges actions and shows results to keep people informed. The built-in iOS apps provide perceptible feedback in response to every user action. Interactive elements are highlighted briefly when tapped, progress indicators communicate the status of long-running operations, and animation and sound help clarify the results of actions.</p></blockquote><ul><li><h3 id="Metaphors-隐喻"><a href="#Metaphors-隐喻" class="headerlink" title="Metaphors (隐喻)"></a>Metaphors (隐喻)</h3></li></ul><p>当一个app的虚拟对象和动作都是对熟悉事物的隐喻时（不管基于现实世界还是数字世界），用户学习的更快;<br>隐喻在iOS系统中发挥的很好，因为用户是直接与屏幕产生物理交互的;<br>用户移动视图来查看更多的内容；拖拽内容；切换开关、移动滑块并且直接滚动来选取值；甚至可以像翻书或杂志一样轻快翻页。<br><em>(个人理解为可操控位置隐喻。)</em></p><blockquote><p>原：People learn more quickly when an app’s virtual objects and actions are metaphors for familiar experiences—whether rooted in the real or digital world. Metaphors work well in iOS because people physically interact with the screen. They move views out of the way to expose content beneath. They drag and swipe content. They toggle switches, move sliders, and scroll through picker values. They even flick through pages of books and magazines.</p></blockquote><ul><li><h3 id="User-Control-用户控制"><a href="#User-Control-用户控制" class="headerlink" title="User Control (用户控制)"></a>User Control (用户控制)</h3></li></ul><p>在整个iOS中，<strong>用户</strong>是掌控者，而不是app;<br>app可以建议一个行动方案或警告危险后果，但app接管决策通常是一个错误;<br>好的app可以在用户授权和避免不必要的结果之间找到正确的平衡;<br>app可以通过<strong>保持交互元素熟悉</strong>和可预测，确认破坏性操作以及轻松取消操作（即使它们已经在进行中）来使用户感觉自己在控制。</p><blockquote><p>原：Throughout iOS, people—not apps—are in control. An app can suggest a course of action or warn about dangerous consequences, but it’s usually a mistake for the app to take over the decision-making. The best apps find the correct balance between enabling users and avoiding unwanted outcomes. An app can make people feel like they’re in control by keeping interactive elements familiar and predictable, confirming destructive actions, and making it easy to cancel operations, even when they’re already underway.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Hexo与GitHub Pages搭建Blog</title>
    <link href="/2021/02/16/Hexo/"/>
    <url>/2021/02/16/Hexo/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍如何使用Hexo与GitHub Pages搭建Blog。  </p></blockquote><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架<a id="more"></a>，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。可以进入<a href="https://hexo.io/zh-cn/">Hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h2 id="Blog搭建步骤"><a href="#Blog搭建步骤" class="headerlink" title="Blog搭建步骤"></a>Blog搭建步骤</h2><p><strong>1. <a href="#1-%E5%AE%89%E8%A3%85Git">安装Git</a></strong><br><strong>2. <a href="#2-%E5%AE%89%E8%A3%85Node-js">安装Node.js</a></strong><br><strong>3. <a href="#3-%E5%AE%89%E8%A3%85Hexo">安装Hexo</a></strong><br><strong>4. <a href="#4-Hexo%E6%8C%87%E4%BB%A4">Hexo命令</a></strong><br><strong>5. <a href="#5-%E8%AE%BE%E7%BD%AESSH">设置SSH</a></strong><br><strong>6. <a href="#6-%E5%88%9B%E5%BB%BA%E5%BA%93">创建库</a></strong><br><strong>7. <a href="#7-%E9%83%A8%E7%BD%B2GitHub-Pages">部署GitHub Pages</a></strong></p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><ul><li><p><strong>Windows：</strong><a href="https://git-scm.com/download/win">Git官网</a>下载并安装</p></li><li><p><strong>Linux：</strong> (Ubuntu, Debian)：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">- sudo apt-<span class="hljs-builtin-name">get</span> install git<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git --version <span class="hljs-comment">#检查版本</span></span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>Windows 用户</strong></p><p>中国大陆地区用户可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 Git 安装包。</p></blockquote></li></ul><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><ul><li><p><strong>Windows：</strong><a href="https://nodejs.org/en/">Node.js官网</a>下载并安装</p></li><li><p><strong>Linux：</strong> (Ubuntu, Debian)：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">- sudo apt-<span class="hljs-builtin-name">get</span> install nodejs <br>- sudo apt-<span class="hljs-builtin-name">get</span> install npm<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node -v <span class="hljs-comment">#检查版本</span></span><br><span class="hljs-meta">$</span><span class="bash"> npm -v</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><ul><li><p><strong>安装：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g hexo-cli</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo -v <span class="hljs-comment">#检查版本</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>初始化Hexo：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo init <span class="hljs-comment">#建站</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>初始化完成后，指定文件夹目录下有：</strong></p><ul><li><code>node_modules</code> 依赖包</li><li><code>public</code> 存放生成的页面</li><li><code>scaffolds</code> 生成文章的一些模板</li><li><code>source</code> 用来存放你的文章</li><li><code>themes</code> 主题</li><li><code>_config.yml</code> 博客的配置文件</li></ul></li></ul><h3 id="4-Hexo指令"><a href="#4-Hexo指令" class="headerlink" title="4.Hexo指令"></a>4.Hexo指令</h3><ul><li><p><strong>init：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo init [folder] <span class="hljs-comment">#新建一个网站，若没有设置folder则默认在目前文件夹建立网站</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>new：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt; <span class="hljs-comment">#新建一篇文章</span></span><br><span class="hljs-meta">$</span><span class="bash"> hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> <span class="hljs-comment">#如果标题包含空格的话，请使用引号括起来</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>server：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo s <span class="hljs-comment">#启动服务器。默认情况下，访问网址为：http://localhost:4000</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>clean：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo clean <span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>generate：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo g <span class="hljs-comment">#生成静态文件</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>deploy：</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo d <span class="hljs-comment">#部署网站</span></span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="5-设置SSH"><a href="#5-设置SSH" class="headerlink" title="5.设置SSH"></a>5.设置SSH</h3><ul><li><strong>设置用户名和Email地址：</strong><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span>  <span class="hljs-comment">#GitHub user</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span> <span class="hljs-comment">#GitHub email</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config -l <span class="hljs-comment">#Check</span></span><br></code></pre></div></td></tr></table></figure></li><li><strong>创建SSH：</strong><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span> <span class="hljs-comment">#GitHub email</span></span><br></code></pre></div></td></tr></table></figure></li><li><strong>设置SSH：</strong><br>将<code>id_rsa.pub</code>密钥放在GitHub Setting中的SSH keys后继续<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh -T git@github.com <span class="hljs-comment">#Check</span></span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="6-创建库"><a href="#6-创建库" class="headerlink" title="6.创建库"></a>6.创建库</h3><ul><li><p><strong>创建项目代码库：</strong><br>Github中点击<code>New repository</code>以<code>yourname.github.io</code>为项目名新建一个项目</p></li><li><p><strong>配置GitHub Pages：</strong><br>进入Settings页Options项找到GitHub Pages并开启</p></li></ul><h3 id="7-部署Github-Pages"><a href="#7-部署Github-Pages" class="headerlink" title="7.部署Github Pages"></a>7.部署Github Pages</h3><ul><li><strong>设置<code>_config.yml</code>配置文件：</strong><br>在配置文件末加上：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repository: git@github.com:yourname/yourname.github.io.git<br>  branch: master<br></code></pre></div></td></tr></table></figure></li><li><strong>安装Git依赖项：</strong><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></div></td></tr></table></figure></li><li><strong>部署：</strong><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo clean <span class="hljs-comment">#清除缓存文件</span></span><br><span class="hljs-meta">$</span><span class="bash"> hexo g <span class="hljs-comment">#生成静态文件</span></span><br><span class="hljs-meta">$</span><span class="bash"> hexo d <span class="hljs-comment">#部署网站</span></span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>  本站是使用 <a href="https://hexo.io/zh-cn/">Hexo 框架</a> +  <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>搭建。        </p><p>  如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。   </p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><strong><a href="https://hexo.io/zh-cn/docs/">Hexo</a></strong></li><li><strong><a href="https://docs.github.com/en/github/working-with-github-pages">GitHub Pages</a></strong></li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
